function dclogs() {
  COMPOSE_HTTP_TIMEOUT=84600 docker-compose logs -f "$@"
}

function unset_aws() {
  unset AWS_PROFILE
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SECURITY_TOKEN
  unset AWS_SESSION_EXPIRATION
  unset AWS_SESSION_TOKEN
}

function act() {
  source .venv/bin/activate
}

function deact() {
  deactivate
}

function uvis() {
  local module=${1:-"main:app"}
  if [ ! -z "$1" ]
  then
    shift
  fi

  if ! command -v uvicorn &> /dev/null
  then
    echo "uvicorn not found"
    return
  fi

  uvicorn $module "$@"
}

function uvir() {
  if [ -z "$1" ]
  then
    uvis main:app --reload
    return
  fi

  uvis "$1" --reload
}

function gen-secret() {
  echo $(python -c "import secrets; print(secrets.token_hex())")
}

function get_remote_origin() {
  git remote -v \
    | grep -m 1 origin \
    | awk '{printf "%s",$2}' \
    | pbcopy
}

function git-nitialize() {
  touch README.org
  git add -A
  git commit -m "Initial commit"
  git push -u origin $(git_current_branch)
}

function cpr() {
  cp -r "$@"
}

function mkdirp() {
  mkdir -p "$@"
}

function psqlc() {
  psql -c "$@"
}

function gig() {
  gi $1 >> .gitignore
  echo "Added $1 ignores to .gitignore"
}

function glump() {
  git pull upstream $(git_main_branch)
  echo "Pulled from upstream\n"
  echo "Now pushing to remote origin"
  git push
}

function zipr() {
  if [[ $1 ]] && [[ $2 ]]; then
    zip -r $2 $1 -x "*node_modules*" -x "*.git/*" -x "*tags*"
  elif [[ $1 ]]; then
    zip -r "$1.zip" $1 -x "*node_modules*" -x "*.git/*" -x "*tags*"
  else
    echo "Missing argument(s)"
    echo "Usage: zipr FILENAME [ZIPPED NAME]"
  fi
}

# Kitty
function k() {
  file=$1
  shift
  kitty --session "$HOME/.config/kitty/sessions/$file.conf" "$@" &
}

function __kitty-templates() {
  local expl
  local -a templates
  templates=( ${${(f)"$(command find $HOME/.config/kitty/sessions -type f | xargs -n1 basename -s .conf)"}} )
  _describe -t templates 'templates' templates "$@"
}

compdef __kitty-templates k

function mcd() {
  mkdir -p "$@"
  cd "${@:$#}"
}

function diffy() {
  diff -y $1 $2
}

function pynit() {
  if [[ -z "$1" ]]; then
    echo "Usage: pynit <module_name>" >&2
    return 1
  fi

  while [[ "$1" ]]
  do
    module=$1
    shift

    mkdir $module
    touch $module/__init__.py

    echo "Generated $module as a Python module"
  done
}

function add-submodule() {
  origin=$(git remote -v \
    | grep -m 1 origin \
    | awk '{printf "%s",$2}')

  curr_dir=$(basename $(pwd))
  cd ../

  echo "Creating submodule $curr_dir in $(pwd) with origin of"
  echo "  $origin\n"

  git submodule add "$origin" "$curr_dir"
  git commit -m "Add submodule"
  cd $curr_dir
}

function update-submodule() {
  curr_submodule=$1
  if [ -z "$curr_submodule" ]; then
    curr_submodule=$(basename $(pwd))
    cd ../
  fi
  git add "$curr_submodule"
  git commit -m "Update submodule"
  git push
  cd $curr_submodule
}

function freeze() {
  pip freeze > requirements.txt
  bat requirements.txt
}

# FZF Stuff
function fcd() {
  local dir
  dir=$(fd -t d ${1:-.} 2> /dev/null | fzf +m) &&
  cd "$dir"
}

function ff() {
  find * | fzf --prompt 'All> ' \
             --header 'CTRL-D: Directories / CTRL-F: Files' \
             --bind 'ctrl-d:change-prompt(Directories> )+reload(find * -type d)' \
             --bind 'ctrl-f:change-prompt(Files> )+reload(find * -type f)'
}

function rgf() {
  local rg_prefix query cmd
  rg_prefix="rg --column --line-number --no-heading --color=always --smart-case"
  query=""
  FZF_DEFAULT_COMMAND="$rg_prefix '$query'" \
    fzf --bind "change:reload:$rg_prefix {q} || true" \
        --ansi --phony --query "$query"
}

function is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

function _gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
    fzf -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}

function _gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

function _gt () {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -'$LINES
}

function _gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
  cut -d$'\t' -f1
}

function _gs() {
  is_in_git_repo || return
  git stash list | fzf --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}

function join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

function bind-git-helper() {
  local char
  for c in $@; do
    eval "fzf-g$c-widget() { local result=\$(_g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
    eval "zle -N fzf-g$c-widget"
    eval "bindkey '^g^$c' fzf-g$c-widget"
  done
}

bind-git-helper f b t r s
unset -f bind-git-helper

function fzf_nvim() {
  file=$(fd --hidden | fzf) || return
  nvim $file
}
