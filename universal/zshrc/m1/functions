# vim: ft=zsh

# Alembic Completion
function __alembic_commands() {
  local -a opts_help
  local expl help="--help"
  opts_help=("(: -)--help[Print usage]")

  case "$words[1]" in
    (branches)
      _arguments -s "(-v --verbose)"{-v,--verbose}"[Verbose]" $opts_help
  esac
  # _describe -t alembic-commands "alembic command" _alembic_subcommands
}

function __alembic_command() {
  local -a _command_args base_options opts_help
  local expl state help="--help"
  alembic_commands=(
    "branches:Show current branch points."
    "current:Display the current revision for a database."
    "downgrade:Revert to a previous version."
    "edit:Edit revision script(s) using \$EDITOR."
    "ensure_version:Create the alembic version table if it doesn't exit already."
    "heads:Show current available heads in the script directory."
    "history:List changeset scripts in chronological order."
    "init:Initialize a new scripts directory."
    "list_templates:List available templates."
    "merge:Merge two revisions together. Creates a new migration file."
    "revision:Create a new revision file."
    "show: Show the revision(s) denoted by the given symbol."
    "stamp:'stamp' the revision table with the given revision; don't run any migrations."
    "upgrade:Upgrade to a later version."
  )
  opts_help=("(: -)--help[Print usage]")

  _describe -t base_options 'alembic command' alembic_commands "$@"
  _arguments $(print -- -s) \
    $opts_help \
    "($help)--version[show program's version number and exit]" \
    "($help -c --config)"{-c=,--config=}"[Alternate config file; defaults to value of ALEMBIC_CONFIG environment variable, or \"alembic.ini\"]" \
    "($help -n --name)"{-n=,--name=}"[Name of section in .ini file to use for Alembic config]" \
    "($help)-x[Additional arguments consumed by custom env.py scripts, e.g. -x setting1=somesetting -x setting2=somesetting]" \
    "($help)--raiseerr[Raise a full stack track on error]" \
    "($help -): :->command" \
    "($help -)*:: :->option-or-argument"
}

function __alembic() {
  local state

  _arguments -C \
    '(-): :->command' \
    '(-)*:: :->option-or-argument'

  case $state in
    (command)
      __alembic_command
      ;;
    (option-or-argument)
      __alembic_commands
      ;;
  esac
}

compdef __alembic alembic

# Rust
alias car="cargo"
alias carb="cargo build"
alias carr="cargo run"
alias carbr="cargo build --release"
alias carc="cargo check"

# Set Emacs Profiles
function setmacs() {
  [[ -z "$1" ]] && { echo "Usage: setmacs <name>" >&2; return 1; }
  echo "$1" > ~/dotfiles/.emacs-profile
  echo "Set $1 as the default Emacs profile"
}

# Custom React Templates
function crn() {
  [[ -z "$1" ]] && { echo "Usage: crn <name>" >&2; return 1; }
  git clone git@github.com:Lazytangent/react-next-template.git $1
  cd $1
  git remote remove origin
  npm install
}

# QMK
function qmkc() {
  qmk compile -km $1 -kb $2
}

function qmkcc() {
  qmk compile
}

function qmkf() {
  qmk flash -km $1 -kb $2
}

function qmkff() {
  qmk flash
}

function aa-gend() {
  docker container run -v $(pwd):/$(basename $(pwd)) -a stdin -a stdout -it aa-github-app-local
}

function genv() {
  touch .env
cat > .env <<- EOM
PORT=5000
DB_USERNAME=$1
DB_PASSWORD=password
DB_DATABASE=$1_db
DB_HOST=localhost
JWT_SECRET=$(openssl rand -base64 10)
JWT_EXPIRES_IN=604800
EOM
}

function psqlcc() {
  psql -c "CREATE USER $1 WITH PASSWORD 'password' CREATEDB;"
}

function jsdock() {
  jsdoc -c $1
}

# TMUX
function t() {
  if tmux ls | grep -q $1; then
    local my_num=$(tmux ls | grep -c $1)
    if [[ $my_num = 1 ]]; then
      tmux attach -t $1
    else
      echo "Too many matches"
    fi
  else
    if [ "$TERM_PROGRAM" = tmux ]; then
      tmux new -s $1 -d
    else
      tmux new -s $1
    fi
  fi
}

function tt() {
  [[ -z "$1" ]] && { echo "Usage: tm <session>" >&2; return 1; }
  tmux has -t $1 && tmux attach -t $1 || tmux new -s $1
}

function ta() {
  tmux attach -t $1
}

function tad() {
  tmux attach -d -t $1
}

function ts() {
  tmux new-session -s "$@"
}

function tkss() {
  tmux kill-session -t $1
}

function tll() {
  tmuxp load "$@"
}

function __tmux-sessions() {
  local expl
  local -a sessions
  sessions=( ${${(f)"$(command tmux list-sessions)"}} )
  _describe -t sessions 'sessions' sessions "$@"
}

function __tmuxp-load() {
  local expl
  local -a templates
  templates=( ${${(f)"$(command find $HOME/.config/tmuxp -type f | xargs -n1 basename -s .yaml)"}} )
  _describe -t templates 'templates' templates "$@"
}

compdef __tmux-sessions tt ta tad tkss
compdef __tmuxp-load tll

function tdup() {
  if [ "$TERM_PROGRAM" = tmux ]; then
    current=$(tmux display-message -p '#S')
    tmux new -s "COPY_OF_$current"
  else
    echo "Not in a tmux session"
    echo "Usage: Run in a tmux session to make a copy of the current session"
  fi
}

function tc() {
  tmux new -s $1 -c $2
}

function tm() {
  tmux command-prompt -I $PWD -p "New session dir:" "attach -c %1"
  echo "Set tmux session directory to $(pwd)"
}

function tsw() {
  if tmux ls | grep -q $1; then
    local my_num=$(tmux ls | grep -c $1)
    if [[ $my_num = 1 ]]; then
      tmux switch -t $1
    else
      echo "Too many matches"
    fi
  else
    tmux new -s $1 -d
    tmux switch -t $1
  fi
}

# Create React App
function crat() {
  npx create-react-app $1 --template $2
}

function crata() {
  npx create-react-app $1 --template @appacademy/react-v17
}

# Sequelize
function sqmg() {
  npx sequelize model:generate --name $1 --attributes $2
}

function sqmgu() {
  npx sequelize model:generate --name $1 --attributes $2 --underscored
}

function sqsg() {
  npx sequelize seed:generate --name $1
}
